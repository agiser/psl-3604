//----------------------------------------------------------------------------

//Модуль генерации звуковых сигналов

//----------------------- Используемые ресурсы: ------------------------------

//Звуковой излучатель (без встроенного генератора) через транзисторный ключ
//подключен к выводу PB13 (выход таймера TIM1_CH1N). Активный уровень - ВЫСОКИЙ.

//----------------------------------------------------------------------------

#include "main.h"
#include "sound.h"

//------------------------------- Константы: ---------------------------------

#define TIM1_PRESCALER    10  //прескалер таймера
#define TIM1_PERIOD     2400  //начальный период таймера

//--------------------------- Стандартные звуки: -----------------------------

#define BEEP_F  1000  //частота стандартного звука, Гц
#define BEEP_D   100  //длительность стандартного звука, мс

#define TICK_F  1000  //частота короткого звука, Гц
#define TICK_D    40  //длительность короткого звука, мс

#define HIGH_F  1600  //частота высокого звука, Гц
#define HIGH_D   100  //длительность высокого звука, мс

#define CLICK_F  400  //частота короткого звука ошибки, КГц
#define CLICK_D   20  //длительность короткого звука ошибки, мс

#define BELL_F   360  //частота звука ошибки, Гц
#define BELL_D   300  //длительность звука ошибки, мс

//----------------------------------------------------------------------------
//----------------------------- Класс TSound: --------------------------------
//----------------------------------------------------------------------------

//----------------------------- Конструктор: ---------------------------------

TSound::TSound(void)
{
  SoundMode = SND_ON;
  SoundTimer = new TSoftTimer();
  SoundTimer->Oneshot = 1;

  RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; //включение тактирования TIM1
  TIM1->PSC = TIM1_PRESCALER - 1;     //загрузка прескалера
  TIM1->ARR = TIM1_PERIOD - 1;        //период
  TIM1->CCMR1 = TIM_CCMR1_OC1M_0 * 3; //toggle output
  TIM1->CCR1 = 0;                     //регистр сравнения
  TIM1->BDTR |= TIM_BDTR_MOE;         //main output enable
  TIM1->CR1 = TIM_CR1_CEN;            //разрешение таймера
  
  Pin_SND.Init(AF_PP_2M);             //настройка пина
}

//---------------------------- Генерация звука: ------------------------------

void TSound::Execute(void)
{
  if(SoundTimer->Over())
    TIM1->CCER &= ~TIM_CCER_CC1NE;
}

//--------------------------- Выключение звука: ------------------------------

void TSound::Off(void)
{
  TIM1->CCER &= ~TIM_CCER_CC1NE;
}

//-------------------- Установка режима генерации звука: ---------------------

void TSound::SetMode(SndMode_t m)
{
  SoundMode = m;
}

//---------------------- Нормальная генерация звука: -------------------------

//Работает, если установлен режим SND_ON.
//f - частота f [Гц]
//d - длительность d [мс]

void TSound::PlayNormal(uint16_t f, uint16_t d)
{
  if(SoundMode == SND_ON)
    PlayAlarm(f, d);
}

//---------------------- Аварийная генерация звука: --------------------------

//Работает, если установлен режим SND_ON или SND_ALARM.
//f - частота f [Гц]
//d - длительность d [мс]

void TSound::PlayAlarm(uint16_t f, uint16_t d)
{
  if(SoundMode != SND_OFF)
  {
    SoundTimer->Start(d);
    TIM1->ARR = (SYSTEM_CORE_CLOCK / TIM1_PRESCALER / 2) / f - 1;
    TIM1->CCER = TIM_CCER_CC1NE;
  }
}

//--------------------------- Стандартные звуки: -----------------------------

void TSound::Beep(void)  { PlayNormal(BEEP_F,  BEEP_D);  }
void TSound::Tick(void)  { PlayNormal(TICK_F,  TICK_D);  }
void TSound::High(void)  { PlayNormal(HIGH_F,  HIGH_D);  }
void TSound::Click(void) { PlayNormal(CLICK_F, CLICK_D); }
void TSound::Bell(void)  { PlayNormal(BELL_F,  BELL_D);  }
void TSound::Alarm(void) { PlayAlarm(BEEP_F,   BEEP_D);  }
void TSound::Alert(void) { PlayAlarm(HIGH_F,   HIGH_D);  }
void TSound::ABell(void) { PlayAlarm(BELL_F,   BELL_D);  }

//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
//----------------------------------------------------------------------------
